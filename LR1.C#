# LR1.3.12.02.2018
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.IO;


namespace LR1
{
    struct V1 {
        public int V;
        public int DAV;
        public int OBL;
    }

    class Program
    {
        //Сортировка пузырьком
        static void BubbleSort(List<V1> V)
        {
            V1 temp;
            for (int i = 0; i < V.Count; i++)
            {
                for (int j = i + 1; j < V.Count; j++)
                {
                    if (V[i].V > V[j].V)
                    {
                        temp = V[i];
                        V[i] = V[j];
                        V[j] = temp;
                    }
                }
            }
        }

        //Поразрядная сортировка и быстрая сортировка 2в1
        static void RadixSorting(List<V1> V, int[] arr, int range, int length)
        {
            V1[] V = new V1[range];
            for (int i = 0; i < range; ++i)
                V[i] = new V1();
            for (int step = 0; step < length; ++step)
            {
                for (int i = 0; i < arr.Length; ++i)
                {
                    int temp = (arr[i] % (int)Math.Pow(range, step + 1)) /
                                                  (int)Math.Pow(range, step);
                    V[temp].Add(arr[i]);
                }
                int k = 0;
                for (int i = 0; i < range; ++i)
                {
                    for (int j = 0; j < V.Count; ++j)
                    {
                        arr[k++] = (int)V[i][j];
                    }
                }
                for (int i = 0; i < range; ++i)
                    V[i].Clear();
            }
        }

        //Сортировка вставками 
        static void Sort(List<V1> V)
        {
            int[] result = new int[V.Count];
            for (int i = 0; i < V.Count; i++)
            {
                int j = i;
                while (j > 0 && result[j - 1] > V[i])
                {
                    result[j] = result[j - 1];
                    j--;
                }
                result[j] = V[i];
            }
            return V;
        }


        //считывание с файла (инфо)
        static void ReadFile(List<V1> list)
    {
            try
            {
                using (StreamReader reader = File.OpenText("G://ALL//УЧЕБА//ZHOLOBOVA//ОС-САОД//V4//PR2.csv"))
                {
                    string[] text = new string[3];
                    while (!reader.EndOfStream)
                    {
                        V1 ind = new V1();
                        text = reader.ReadLine().Split(',');
                        ind.V = Convert.ToInt32(text[0]);
                        ind.DAV = Convert.ToInt32(text[1]);
                        ind.OBL = Convert.ToInt32(text[2]);
                        list.Add(ind);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.ReadKey();
            }
    }

        static void Main(string[] args)
        {
            List<V1> V = new List<V1>();

            Stopwatch watch = new Stopwatch();
        
            ReadFile(V);
            Console.WriteLine("Сортировка пузырьком");
            watch.Start(); BubbleSort(V);
            watch.Stop();
            Console.WriteLine(watch.ElapsedMilliseconds);
            watch.Restart(); V.Clear();

            ReadFile(V);
            Console.WriteLine("Поразрядная и быстрая сортировка");
            watch.Start(); RadixSorting(V);
            watch.Stop();
            Console.WriteLine(watch.ElapsedMilliseconds);
            watch.Restart(); V.Clear();

            ReadFile(V);
            Console.WriteLine("Сортировка вставками");
            watch.Start(); Sort(V);
            watch.Stop();
            Console.WriteLine(watch.ElapsedMilliseconds);
            watch.Restart();V.Clear();

            Console.ReadKey();
        }
    }
}
